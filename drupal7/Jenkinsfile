#!groovyâ€‹
// Include Xeno Global Library
@Library('XENO_JENKINS') _
def getLabel() {
    // Which server to run this on.
    return "php[5|7][a-c]"
}
// Choose the site name based on git name and if it is a Pull Request or branch.
def getSitename() {
    // Set the project name, most likely the git repo name.
    SITE_NAME = "SITENAME"
    if (env.CHANGE_BRANCH && !env.CHANGE_FORK){
        return "${SITE_NAME}-${env.CHANGE_BRANCH.toLowerCase()}"
    }
    else{
        return "${SITE_NAME}-${env.BRANCH_NAME.toLowerCase()}"
    }
}

pipeline {
  environment {
    // Database backup name, if it is not the site name use the known file name
    X_DB_BACKUP = "SITENAME.sql.gz"
    // Database User to use on the testing server
    X_DB_USER = "SITENAME"
    // The live URL, used for stage file proxy and WP find-replace
    X_LIVE_DOMAIN = "https://www.SITENAME.com"
    // Slack IDs for notification.
    X_SLACK_NOTIFY = "<@here>"
    // Slack IDs for notification.
    X_SLACK_CHANNEL = "#jenkins-ci"
    // Code paths for phpcs checks, space delimited
    X_CODE = "web/sites/all/modules/custom/ web/sites/all/themes/theme"
    // Code paths for phpcs ignore, comma delimited
    X_IGNORE = "web/sites/all/theme/intelligence/bootstrap/*"
  }
  agent {
    node {
      label "${getLabel()}"
      customWorkspace "/var/www/${getSitename()}"
    }
  }
  options {
      disableConcurrentBuilds()
      lock resource: "${getSitename()}", inversePrecedence: true
      timeout(time: 1, unit: 'HOURS')
      buildDiscarder(logRotator(numToKeepStr: '7'))
  }
  stages {
    stage("Checkout") {
      steps {
      milestone(2)
        checkout scm
      }
    }

    stage("Build") {
      when {
        // Only build if the site is new
        expression {
          return !fileExists("/var/www/${getSitename()}/web/.htaccess")
        }
      }
      steps {
        milestone(5)
        xenoBuildD7web( "${getSitename()}", env.X_DB_BACKUP, env.X_DB_USER, env.X_LIVE_DOMAIN, "${getLabel()}")
        sh """
            mkdir -p web/sites/default/files/
            git config core.fileMode false
            drush go-staging -y --root=web
            drush vset preprocess_js 0 --yes --root=web
            drush vset preprocess_css 0 --yes --root=web
          """
      }
    }
    stage("Tests") {
        when {
              not { branch 'jenkins' }
        }
        failFast true
        parallel {

            stage('Behat') {
              steps {
              echo 'Behat Check'
              // behatD7web("${getSitename()}", "@tags") The site name to update the Bahat scripts with.
              }
            }
            stage('PHPcs') {
              steps {
              echo 'PHPcs Check'
              // phpcs("[Drupal|Wordpress]", "${getSitename()}", "${X_CODE}", "${X_IGNORE}")
                phpcs("Drupal", "${getSitename()}", "${X_CODE}", "${X_IGNORE}")
              }
            }
        }
    }
    stage ('Deploy Code') {
        when {
           branch 'master'
        }
        steps {
          slackNotify("${X_SLACK_NOTIFY}\nReady to review and deploy. https://${getSitename()}.xenostaging.com", "${X_SLACK_CHANNEL}", "good")
          script {
            timeout(time:4, unit:'DAYS') { // expires in 4 days
                env.APPROVED_BY = input message: 'Deploy to Production?', ok: 'Release!', submitterParameter: 'APPROVER'
            } // end timeout
            slackNotify("Approved by ${env.APPROVED_BY} and deploy started", "${X_SLACK_CHANNEL}", "good")
            // customDeploy("${getSitename()}")
          }
        }
    }
  }
  post {
    success {
       slackNotify("${X_SLACK_NOTIFY}\nBuild Compete. https://${getSitename()}.xenostaging.com", "${X_SLACK_CHANNEL}", "good")
    }
    failure {
       slackNotify("${X_SLACK_NOTIFY}\nBuild Failed. https://${getSitename()}.xenostaging.com", "${X_SLACK_CHANNEL}", "danger")
    }
    unstable {
       slackNotify("${X_SLACK_NOTIFY}\nBuild is unstable. https://${getSitename()}.xenostaging.com", "${X_SLACK_CHANNEL}", "warning")
    }
  }
}
